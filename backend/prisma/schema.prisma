generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 관리자 관련 관계
  adminLogs AdminLog[]
  
  @@map("users")
}

model Business {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  address     String
  phone       String?
  email       String?
  website     String?
  category    String
  status      BusinessStatus @default(PENDING)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 이미지 관계
  images      BusinessImage[]
  
  // 제휴 관계
  partnerships Partnership[]
  
  @@map("businesses")
}

model BusinessImage {
  id         Int      @id @default(autoincrement())
  businessId Int
  imageUrl   String
  altText    String?
  isMain     Boolean  @default(false)
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@map("business_images")
}

model Partnership {
  id          Int      @id @default(autoincrement())
  businessId  Int
  partnerName String
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime?
  status      PartnershipStatus @default(ACTIVE)
  discount    Float?
  terms       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@map("partnerships")
}

model AdminLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  resource  String
  resourceId Int?
  details   String?  @db.Text
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admin_logs")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum BusinessStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum PartnershipStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  TERMINATED
}
